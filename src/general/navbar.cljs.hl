(ns general.navbar
  (:require [clojure.string :as string]
            [general.bootstrap :as bootstrap]))

(defc nav-active nil)
(def location (first (string/split (second (string/split (.-pathname js/location) #"/")) #"\.")))
(defc height 50)

(defelem nav-button [{:keys [name]} kids]
  (button :type "button"
          :class (cell= {:navbar-toggle true
                         :collapsed     true
                         :active        (= nav-active name)})
          :click #(cond (not @nav-active) (reset! nav-active name)
                        (= @nav-active name) (reset! nav-active nil)
                        :else (reset! nav-active name))
          kids))

(defelem fixed-bar [_ kids]
  (div :class "navbar navbar-inverse navbar-fixed-top"
       (bootstrap/container kids)))
(defelem static-bar [_ kids]
  (div :class "navbar navbar-inverse navbar-static-top"
       :style "margin-bottom:0;"
       (bootstrap/container kids)))
(defelem header2 [_ kids]
  (apply (div :class "navbar-header") kids))
(defelem brand [_ kids]
  (apply
    (a :class "navbar-brand"
       :click #(reset! nav-active nil)
       :href "/index.html") kids))
(defelem menu2 [attr kids]
  (div :class (cell= {:collapse true
                      :navbar-collapse true
                      :in (= nav-active "menu")})
       (apply (ul :class "nav navbar-nav") attr kids)))

(defelem nav-menu-button [_ _]
  (nav-button
    (span :style (cell= (str "color:" (if (= "menu" nav-active) "white" "black") ";"))
          :class (cell= {:glyphicon true
                         :glyphicon-chevron-down (not (= "menu" nav-active))
                         :glyphicon-chevron-up   (= "menu" nav-active)}))
    :name "menu")
  )

(defelem item [{:keys [name]} _]
  (let [lc-name (string/lower-case name)] 
    (li :class (cell= {:active (= location lc-name)})
        (a :href (str "/" lc-name ".html") name))))

(defelem home-item [_ _]
  (li :class (cell= {:active (or (= location nil)
                                 (= location "index"))})
      (a :href "/index.html" "Home")))

(defelem sicp-item [_ _]
  (li :class (cell= {:active (= location "book")})
      (a :href "/book/sicp/index.html" "SICP")))


(defelem fixed-offset [_ _]
  (div :style "height:50px"))

(defelem fixed-nav [_ kids]
  (fixed-bar
    (header2
      (nav-menu-button)
      kids
      (brand "Λaron Niskin"))
    (menu2
      (home-item)
      (sicp-item)
      (item :name "CV")
      )))

(defelem fixed [attr kids]
  (div (fixed-nav attr kids)
       (fixed-offset)))

(defelem static [attr kids]
  (static-bar
    (header2
      (nav-menu-button)
      kids
      (brand "Λaron Niskin"))
    (menu2
      (home-item)
      (sicp-item)
      (item :name "CV")
      )))
