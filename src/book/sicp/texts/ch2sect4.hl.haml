%clj
  (ns book.sicp.texts.ch2sect4
    (:require-macros [tailrecursion.hoplon.markdown :refer [md]])
    (:require        [tailrecursion.hoplon.markdown :as md]
                     [book.sicp.book-data           :as data]))

%sexp
  defelem content [_ _]
  %div
    %data.sect{:title "Multiple Representations for Abstract Data"}
      %md
        We have introduced data abstraction, a methodology for structuring
        systems in such a way that much of a program can be specified
        independent of the choices involved in implementing the data objects
        that the program manipulates. For example, we saw in section 2.1.1 how
        to separate the task of designing a program that uses rational numbers
        from the task of implementing rational numbers in terms of the computer
        language's primitive mechanisms for constructing compound data. The key
        idea was to erect an abstraction barrier -- in this case, the selectors
        and constructors for rational numbers (`make-rat`, `numer`, `denom`) --
        that isolates the way rational numbers are used from their underlying
        representation in terms of list structure. A similar abstraction
        barrier isolates the details of the procedures that perform rational
        arithmetic (`add-rat`, `sub-rat`, `mul-rat`, and `div-rat`) from the
        "higher-level" procedures that use rational numbers. The resulting
        program has the structure shown in figure 2.1.

        These data-abstraction barriers are powerful tools for controlling
        complexity. By isolating the underlying representations of data
        objects, we can divide the task of designing a large program into
        smaller tasks that can be performed separately. But this kind of data
        abstraction is not yet powerful enough, because it may not always make
        sense to speak of "the underlying representation" for a data object.

        For one thing, there might be more than one useful representation for a
        data object, and we might like to design systems that can deal with
        multiple representations. To take a simple example, complex numbers may
        be represented in two almost equivalent ways: in rectangular form (real
        and imaginary parts) and in polar form (magnitude and angle). Sometimes
        rectangular form is more appropriate and sometimes polar form is more
        appropriate. Indeed, it is perfectly plausible to imagine a system in
        which complex numbers are represented in both ways, and in which the
        procedures for manipulating complex numbers work with either
        representation.

        More importantly, programming systems are often designed by many people
        working over extended periods of time, subject to requirements that
        change over time. In such an environment, it is simply not possible for
        everyone to agree in advance on choices of data representation. So in
        addition to the data-abstraction barriers that isolate representation
        from use, we need abstraction barriers that isolate different design
        choices from each other and permit different choices to coexist in a
        single program. Furthermore, since large programs are often created by
        combining pre-existing modules that were designed in isolation, we need
        conventions that permit programmers to incorporate modules into larger
        systems additively, that is, without having to redesign or reimplement
        these modules.

        In this section, we will learn how to cope with data that may be
        represented in different ways by different parts of a program. This
        requires constructing *generic procedures* -- procedures that can
        operate on data that may be represented in more than one way. Our main
        technique for building generic procedures will be to work in terms of
        data objects that have *type tags*, that is, data objects that include
        explicit information about how they are to be processed. We will also
        discuss *data-directed* programming, a powerful and convenient
        implementation strategy for additively assembling systems with generic
        operations.

        We begin with the simple complex-number example. We will see how type
        tags and data-directed style enable us to design separate rectangular
        and polar representations for complex numbers while maintaining the
        notion of an abstract "complex-number" data object. We will accomplish
        this by defining arithmetic procedures for complex numbers
        (`add-complex`, `sub-complex`, `mul-complex`, and `div-complex`) in
        terms of generic selectors that access parts of a complex number
        independent of how the number is represented. The resulting
        complex-number system, as shown in figure 2.19, contains two different
        kinds of abstraction barriers. The "horizontal" abstraction barriers
        play the same role as the ones in figure 2.1. They isolate
        "higher-level" operations from "lower-level" representations. In
        addition, there is a "vertical" barrier that gives us the ability to
        separately design and install alternative representations.

      %data.fig{:footer "Data-abstraction barriers in the complex-number system."}

      %md
        In section 2.5 we will show how to use type tags and data-directed
        style to develope a generic arithmetic package. This provides
        procedures (`add`,`mul`, and so on) that can be used to manipulate all
        sorts of "numbers" and can be easily extended when a new kind of number
        is needed. In section 2.5.3, we'll show how to use generic arithmetic
        in a system that performs symbolic algebra.

    %data.subsect{:title "Representations for Complex Numbers"}
      %md
        We will develope a system that performs arithmetic operations on
        complex numbers as a simple but unrealistic example of a program that
        uses generic operations. We begin by discussing two plausible
        representations for complex numbers as ordered pairs: rectangular form
        (real part and imaginary part) and polar form (magnitude and
        angle).<<In actual computational systems, rectangular form is
        preferable to polar form most of the time because of roundoff errors in
        conversion between rectangular and polar form. This is why the
        complex-number example is unrealistic. Nevertheless, it provides a
        clear illustration of the design of a system using generic operations
        and a good introduction to the more substantial systems to be developed
        later in this chapter.>> Section 2.4.2 will show how both
        representations can be made to coexist in a single system through the
        use of type tags and generic operations.

        Like rational numbers, complex numbers are naturally represented as
        ordered pairs. The set of complex numbers can be thought of as a
        two-dimensional space with two orthogonal axes, the "real" axis and the
        "imaginary" axis. (See figure 2.20.) From this point of view, the
        complex number \\(z=x+iy\\) (where \\(i^2=-1\\)) can be thought of as
        the point in the plane whose real coordinate is \\(x\\) and whose
        imaginary coordinate is \\(y\\). Addition of complex numbers reduces in
        this representation to addition of coordinates:

        $$\text{Real-part }(z_1+z_2)=\text{Real-part }(z_1)+\text{Real-part }(z_2)
        \\\\\text{Imaginary-part }(z_1+z_2) = \text{Imaginary-part }(z_1)+\text{Imaginary-part }(z_2)$$

        When multiplying complex numbers, it is more natural to think in terms
        of representing a complex number in polar form, as a magnitude and an
        angle (\\(r\\) and \\(A\\) in figure 2.20). The product of two complex
        numbers is the vector obtained by stretching one complex number by the
        length of the other and then rotating it through the angle of the
        other:

        $$\text{Magnitude }(z_1\cdot z_2)= \text{Magnitude }(z_1)\cdot\text{Magnitude }(z_2)
        \\\\\text{Angle }(z_1\cdot z_2)=\text{Angle }(z_1)+\text{Angle }(z_2)$$

        Thus, there are two different representations for complex numbers,
        which are appropriate for different operations. Yet, from the viewpoint
        of someone writing a program that uses complex numbers, the principle
        of data abstraction suggests that all the operations for manipulating
        complex numbers should be available regardless of which representation
        is used by the computer. For example, it is often useful to be able to
        find the magnitude of a complex number that is specified by rectangular
        coordinates. Similarly, it is often useful to be able to determine the
        real part of a complex number that is specified by polar coordinates.


      %data.fig{:footer "Complex numbers as points in the plane."}

      %md
        To design such a system, we can follow the same data-abstraction
        strategy we followed in designing the rational-number package in
        section 2.1.1. Assume that the operations on complex numbers are
        implemented in terms of four selectors: `real-part`, `imag-part`,
        `magnitude`, and `angle`. Also assume that we have two procedures for
        constructing complex numbers: `make-from-real-imag` which returns a
        complex number with the specified real and imaginary parts, and
        `make-from-mag-ang` which returns a complex number with the specified
        magnitude and angle. These procedures have the property that, for any
        complex number \\(z\\), both

        ```clj
        (make-from-real-imag (real-part z) (imag-part z))
        ```

        and 
        ```clj
        (make-from-mag-ang (magnitude z) (angle z))
        ```

        produce complex numbers that are equal to \\(z\\).

        Using these constructors and selectors, we can implement arithmetic on
        complex numbers using the "abstract data" specified by the constructors
        and selectors, just as we did for rational numbers in section 2.1.1. As
        shown in the formulas above, we can add and subtract complex numbers in
        terms of real and imaginary parts while multiplying and dividing
        complex numbers in terms of magnitudes and angles:

        ```clj
        (defn add-complex [z1 z2]
          (make-from-real-imag (+ (real-part z1) (real-part z2))
                               (+ (imag-part z1) (imag-part z2))))

        (defn sub-complex [z1 z2]
          (make-from-real-imag (- (real-part z1) (real-part z2))
                               (- (imag-part z1) (imag-part z2))))

        (defn mul-complex [z1 z2]
          (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                             (+ (angle z1) (angle z2))))

        (defn div-complex [z1 z2]
          (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                             (- (angle z1) (angle z2))))
        ```

        To complete the complex-number package, we must choose a representation
        and we must implement the constructors and selectors in terms of
        primitive numbers and primative list structure. There are two obvious
        ways to do this: We can represent a complex number in "rectangular
        form" as a pair (real part, imaginary part) or in "polar form" as a
        pair (magnitude, angle). Which shall we choose?

        In order to make the different choices concrete, imagine that there are
        two programmers, Ben Bitdiddle and Alyssa P. Hacker, who are
        independently designing representations for the complex-number system.
        Ben chooses to represent complex numbers in rectangular form. With this
        choice, selecting the real and imaginary parts of a complex number is
        straightforward, as is constructing a complex number with given real
        and imaginary parts. To find the magnitude and the angle, or to
        construct a complex number with a given magnitude and angle, he uses
        the trigonometric relations:

        $$\begin{align*}
        x=&r\cos A & r=&\sqrt{x^2+y^2}
        \\\\y=&r\sin A & A=&\arctan(y,x)
        \end{align*}$$

        which relate the real and imaginary parts \\((x,y)\\) to the magnitude
        and angle \\((r,A)\\).<<The arctangent function referred to here, is a
        combination of the Java arctan function and a conditional that accounts
        for the quadrants via the signs of the arguments.>> Ben's
        representation is therefore given by the following selectors and
        constructors:

        ```clj
        (defn real-part [z] (first z))

        (defn imag-part [z] (second z))

        (defn magnitude [z]
          (sqrt (+ (square (real-part z)) (square (imag-part z)))))

        (defn angle [z]
          (arctan (imag-part z) (real-part z)))

        (defn make-from-real-imag [x y]
          (list x y))

        (defn make-from-mag-ang [r a]
          (list (* r (Math/cos a)) (* r (Math/sin a))))
        ```

        If you tried this code (which I hope you did), you may have noticed
        that our `angle` procedure doesn't work! The `arctan` function is not
        defined. If you define it, remember to account for the quadrants!

        Alyssa, in contrast, chooses to represent complex numbers in polar
        form. For her, selecting the magnitude and angle is straightforward,
        but she has to use the trigonometric relations to obtain the real and
        imaginary parts. Alyssa's representation is:

        ```clj
        (defn real-part [z]
          (* (magnitude z) 
             (Math/cos (angle z))))

        (defn imag-part [z]
          (* (magnitude z)
             (Math/sin (angle z))))

        (defn magnitude [z]
          (first z))

        (defn angle [z]
          (second z))

        (defn make-from-real-imag [x y]
          (list (sqrt (+ (square x) 
                         (square y)))
                (arctan y x)))

        (defn make-from-mag-ang [r a]
          (list r a))
        ```

        The discipline of data abstraction ensures that the same implementation
        of `add-complex`, `sub-complex`, `mul-complex`, and `div-complex` will
        work with either Ben's representation or Alyssa's representation.

    %data.subsect{:title "Tagged Data"}
      %md
        One way to view data abstraction is as an application of the "principal
        of least commitment." In implementing the complex-number system in
        secion 2.4.1, we can use either Ben's rectangular representation or
        Alyssa's polar representation. The abstraction barrier formed by the
        selectors and constructors permits us to defer to the last possible
        moment the choice of a concrete representation for our data objects and
        thus retain maximum flexibility in our system design.

        The principle of least commitment can be carried to even further
        extremes. If we desire, we can maintain the ambiguity of representation
        even *after* we have designed the selectors and constructors, and elect
        to use both Ben's representation *and* Alyssa's representaion. If both
        representations are included in a single system, however, we will need
        some way to distinguish data in polar form from data in rectangular
        form. Otherwise, if we were asked, for instance, to find the
        `magnitude` of the pair (3,4), we wouldn't know whether to answer 5
        (interpreting the number in rectangular form) or 3 (interpreting the
        number in polar form). A straightforward way to accomplish this
        distinction is to include a *type tag* -- the symbol `rectangular` or
        `polar` -- as part of each complex number. Then when we need to
        manipulate a complex number we can use the tag to decide which selector
        to apply.

        In order to manipulate tagged data, we will assume that we have
        procedures `type-tag` and `contents` that extract from a data object
        the tag and the actual contents (the polar or rectangular coordinates,
        in the case of a complex number). We will also postulate a procedure
        `attach-tag` that takes a tag and contents and produces a tagged data
        object. A straightforward way to implement this is to ordinary list
        structure:

        ```clj
        (defn attach-tag [type-tag contents]
          (list type-tag contents))

        (defn type-tag [datum]
          (if (list? datum)
              (first datum)
              (throw (Exception. "Bad tagged dataum -- TYPE-TAG"))))

        (defn contents [datum]
          (if (list? datum)
              (rest datum)
              (throw (Exception. "Bad tagged datum -- CONTENTS"))))
        ```

        Using these procedures, we can define predicates `rectangular?` and
        `polar?`, which recognize polar and rectangular numbers, respectively:

        ```clj
        (defn rectangular? [z]
          (= (type-tag z) 'rectangular))

        (defn polar? [z]
          (= (type-tag z) 'polar))
        ```

        With type tags, Ben and Alyssa can now modify their code so that their
        two different representations can coexist in the same system. Whenever
        Ben constructs a complex number, he tags it as rectangular. Whenever
        Alyssa constructs a complex number, she tags it as polar. In addition,
        Ben and Alyssa must make sure that the names of their procedures do not
        conflict. One way to do this is for Ben to append the suffix
        `rectangular` to the name of each of his representation procedures and
        for Alyssa to append `polar` to the names of hers. Here is Ben's
        revised rectangular representation from section 2.4.1:

        ```clj
        (defn real-part-rectangular [z] (first z))

        (defn imag-part-rectangular [z] (second z))

        (defn magnitude-rectangular [z]
          (sqrt (+ (square (real-part z)) (square (imag-part z)))))

        (defn angle-rectangular [z]
          (arctan (imag-part z) (real-part z)))

        (defn make-from-real-imag-rectangular [x y]
          (attach-tag 'rectangular (list x y)))

        (defn make-from-mag-ang-rectangular [r a]
          (attach-tag 'rectangular 
            (list (* r (Math/cos a)) 
                  (* r (Math/sin a)))))
        ```

        and here is Alyssa's revised polar representation:

        ```clj
        (defn real-part-polar [z]
          (* (magnitude z) 
             (Math/cos (angle z))))

        (defn imag-part-polar [z]
          (* (magnitude z)
             (Math/sin (angle z))))

        (defn magnitude-polar [z]
          (first z))

        (defn angle-polar [z]
          (second z))

        (defn make-from-real-imag-polar [x y]
          (attach-tag 'polar
                      (list (sqrt (+ (square x) 
                                     (square y)))
                            (arctan y x))))

        (defn make-from-mag-ang-polar [r a]
          (attach-tag 'polar
                      (list r a)))
        ```

        Each generic selector is implemented as a procedure that checks the tag
        of its argument and calls the appropriate procedure for handling data
        of that type. For example, to obtain the real part of a complex number,
        `real-part` examines the tag to determine whether to use Ben's
        `real-part-rectangular` or Alyssa's `real-part-polar`. In either case,
        we use `contents` to extract the bare, untagged datum and send this to
        the rectangular or polar procedure as required:

        ```clj
        (defn real-part [z]
          (cond (rectangular? z) (real-part-rectangular (contents z))
                (polar? z)       (real-part-polar       (contents z))
                :else (throw (Exception. "Unknown type -- REAL-PART"))))

        (defn imag-part [z]
          (cond (rectangular? z) (imag-part-rectangular (contents z))
                (polar? z)       (imag-part-polar       (contents z))
                :else (throw (Exception. "Unknown type -- IMAG-PART"))))

        (defn magnitude [z]
          (cond (rectangular? z) (magnitude-rectangular (contents z))
                (polar? z)       (magnitude-polar       (contents z))
                :else (throw (Exception. "Unknown type -- MAGNITUDE"))))

        (defn angle [z]
          (cond (rectangular? z) (angle-rectangular (contents z))
                (polar? z)       (angle-polar       (contents z))
                :else (throw (Exception. "Unknown type -- ANGLE"))))
        ```

        To implement the complex-number arithmetic operations, we can use the
        same procedures `add-complex`, `sub-complex`, `mul-complex`, and
        `div-complex` from section 2.4.1, because the selectors they call are
        generic, and so will work with either representation. For example, the
        procedure `add-complex` is still

        ```clj
        (defn add-complex [z1 z2]
          (make-from-real-imag (+ (real-part z1) (real-part z2))
                               (+ (imag-part z1) (imag-part z2))))
        ```

        Finally, we must choose whether to construct complex numbers using
        Ben's representation or Alyssa's representation. One reasonable choice
        is to construct rectangular numbers whenever we have real and imaginary
        parts and to construct polar numbers whenever we have magnitudes and
        angles:

        ```clj
        (defn make-from-real-imag [x y]
          (make-from-real-imag-rectangular x y))

        (defn make-from-mag-ang [r a]
          (make-from-mag-ang-polar r a))
        ```

      %data.fig{:footer "Structure of the generic complex-arithmetic system."}

      %md
        The resulting complex-number system has the structure shown in figure
        2.21. The system has been decomposed into three relatively independent
        parts: the complex-number-arithmetic operations, Alyssa's polar
        implementation, and Ben's rectangular implementation. The polar and
        rectangular implementations could have been written by Ben and Alyssa
        working seperately, and both of these can be used as underlying
        representations by a third programmer implementing the
        complex-arithmetic procedures in terms of the abstract
        constructor/selector interface.

        Since each data object is tagged with its type, the selectors operate
        on the data in a generic manner. That is, each selector is defined to
        have a behavior that depends upon the particular type of data it is
        applied to. Notice the general mechanism for interfacing the separate
        representations: Within a given representation implementation (say,
        Alyssa's polar package) a complex number is an untyped pair (magnitude,
        angle). When a generic selector operates on a number of `polar type`,
        it strips off the tag and passes the contents on to Alyssa's code.
        Conversely, when Alyssa constructs a number for general use, she tags
        it with a type so that it can be appropriately recognized by the
        higher-level procedures. This discipline of stripping off and attaching
        tags as data objects are passed from level to level can be an important
        organizational strategy, as we shall see in section 2.5.

    %data.subsect{:title "Data-Directed Programming and Additivity"}
      %md
        The general strategy of checking the type of a datum and calling an
        appropriate procedure is called *dispatching on type*. This is a
        powerful strategy for obtaining modularity in system design. On the
        other hand, implementing the dispatch as in section 2.4.2 has two
        significant weaknesses. One weakness is that the generic interface
        procedures (`real-part`, `imag-part`, `magnitude`, and `angle`) must
        know about all the different representations. For instance, suppose we
        wanted to incorporate a new representation for complex numbers into our
        complex-number system. We would need to indentify this new
        representation with a type, and then add a clause to each of the
        generic interface procedures to check for the new type and apply the
        appropriate selector for that representation.

        Another weakness of the technique is that even though the individual
        representations can be designed separately, we must guarantee that no
        two procedures in the entire system have the same name. This is why Ben
        and Alyssa had to change the names of their original procedures from
        section 2.4.1.

        The issue underlying both of these weaknesses is that the technique for implementing generic interfaces is not additive. The person implementing the generic selector procedures must modify those procedures each time a new representation is installed, and the people interfacing the individual representations must modify their code to avoid name conflicts. In each of these cases, the changes that must be made to the code are straightforward, but they must be made nonetheless, and this is a source of inconvenience and error. This is not much of a problem for the complex-number system as it stands, but suppose there were not two but hundreds of different representations for complex numbers. And suppose that there were many generic selectors to be maintained in the abstract-data interface. Suppose, in fact, that no one programmer knew all the interface procedures or all the representations. The problem is real and must be addressed in such programs as large-scale data-base-management systems.

        What we need is a means for modularizing the system design even further. This is provided by the programming technique known as data-directed programming. To understand how data-directed programming works, begin with the observation that whenever we deal with a set of generic operations that are common to a set of different types we are, in effect, dealing with a two-dimensional table that contains the possible operations on one axis and the possible types on the other axis. The entries in the table are the procedures that implement each operation for each type of argument presented. In the complex-number system developed in the previous section, the correspondence between operation name, data type, and actual procedure was spread out among the various conditional clauses in the generic interface procedures. But the same information could have been organized in a table, as shown in figure 2.22.

        Data-directed programming is the technique of designing programs to work with such a table directly. Previously, we implemented the mechanism that interfaces the complex-arithmetic code with the two representation packages as a set of procedures that each perform an explicit dispatch on type. Here we will implement the interface as a single procedure that looks up the combination of the operation name and argument type in the table to find the correct procedure to apply, and then applies it to the contents of the argument. If we do this, then to add a new representation package to the system we need not change any existing procedures; we need only add new entries to the table.
