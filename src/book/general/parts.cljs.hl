(ns book.general.parts
  (:require-macros [tailrecursion.hoplon.markdown :refer [md]])
  (:require [general.info                  :as info]
            [general.toc                   :as toc]
            [clojure.string                :as string]
            [tailrecursion.hoplon.markdown :as md]))

(def ^:dynamic *book-data* (cell {}))


(defn make-link
  ([ch] (str "#!/ch/" ch "/"))
  ([ch sect] (str "#!/ch/" ch "/sect/" sect "/"))
  ([ch sect sub] (str "#!/ch/" ch "/sect/" sect "/sub/" sub "/"))
  ([ch sect sub ssub] (str "#!/ch/" ch "/sect/" sect "/sub/" sub "/ssub/" ssub "/")))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Defining how book data will be stored
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Functions for getting into from *book-data*
;
(defn get-chapters [data]
  (:ch data))
(defn get-sects [data ch]
  (:sect ((:ch data) ch)))
(defn get-subsects [data ch sect]
  (:sub ((:sect ((:ch data) ch)) sect)))
(defn get-ssubs [data ch sect sub]
  (:ssub ((:sub ((:sect ((:ch data) ch)) sect)) sub)))
(defn get-exs [data ch]
  (:ex ((:ch data) ch)))
(defn get-figs [data ch]
  (:fig ((:ch data) ch)))
(defn get-footnotes [data ch]
  (:footnote ((:ch data) ch)))




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Making the general book part
;
(defelem part [{:keys [size link title]} kids]
  (div :scroll-to (cell= (= info/route* link)) 
       :at-top #(reset! toc/scroll-location link)
       (size :class "text-left" title)
       (div :class "" kids)))


(defelem content [attr kids]
  (apply (div :class "text-justify"
              :style "padding-left:10%; padding-right:5%;") attr kids))

(defelem about [{:keys [title tagline]} kids]
  (div :scroll-to (cell= (= info/route*
                            (str "#!/" (:short-title *book-data*) "/")))
       :at-top #(reset! toc/scroll-location (str "#!/" (:short-title @*book-data*) "/"))
       :class "text-justify"
       (h1 :class "text-left" (:title @*book-data*))
       (h3 (:tagline @*book-data*))
       (div kids)))
(defelem chapter [{:keys [title]} kids]
  (let [ch        (inc (count (get-chapters @*book-data*)))
        link      (make-link ch)
        this-data {:ch ch :title title :link link}
        title     (str ch " " title)]
    (swap! *book-data* #(assoc-in % [:ch ch] this-data))
    (part :size h1 :title title :link link kids)))
(defelem sect [{:keys [title]} kids]
  (let [ch        (count (get-chapters @*book-data*))
        sect      (inc (count (get-sects @*book-data* ch)))
        link      (make-link ch sect)
        this-data {:ch ch :sect sect :title title :link link}
        title     (str ch "." sect " " title)]
    (swap! *book-data* #(assoc-in % [:ch ch :sect sect] this-data))
    (part :size h2 :title title :link link kids)))
(defelem subsect [{:keys [title]} kids]
  (let [ch        (count (get-chapters @*book-data*))
        sect      (count (get-sects @*book-data* ch))
        sub       (inc (count (get-subsects @*book-data* ch sect)))
        link      (make-link ch sect sub)
        this-data {:ch ch :sect sect :sub sub :title title :link link}
        title     (str ch "." sect "." sub " " title)]
    (swap! *book-data* #(assoc-in % [:ch ch :sect sect :sub sub] this-data))
    (part :size h3 :title title :link link kids)))
(defelem ssub [{:keys [title]} kids]
  (let [ch        (count (get-chapters @*book-data*))
        sect      (count (get-sects @*book-data* ch))
        sub       (count (get-subsects @*book-data* ch sect))
        ssub      (inc (count (get-ssubs @*book-data* ch sect sub)))
        link      (make-link ch sect sub ssub)
        this-data {:ch ch :sect sect :sub sub :ssub ssub :type :ssub :title title :link link}
        title     title]
    (swap! *book-data* #(assoc-in % [:ch ch :sect sect :sub sub :ssub ssub] this-data))
    (part :size h4 :title title :link link kids)))

(defelem exercises [attr kids]
  (let [ch        (count (get-chapters @*book-data*))
        sect      (count (get-sects @*book-data* ch))
        sub       (count (get-subsects @*book-data* ch sect))
        ssub      (inc (count (get-ssubs @*book-data* ch sect sub)))
        link      (make-link ch sect sub ssub)
        end-exers (count (:ex ((:ch @*book-data*) ch)))
        first-exs (inc (- end-exers (count (filter #(not (= "" %)) kids))))
        title     (str "Exercise" (if (= 0 (- end-exers first-exs))
                                      (str " ")
                                      (str "s " first-exs "-")) end-exers)
        this-data {:type "exercises" :title title :link link}]
    (swap! *book-data* #(assoc-in % [:ch ch :sect sect :sub sub :ssub ssub] this-data))
    (part :size h3 :title "" :link link kids)))

(defelem exercise [attr kids]
  (let [ch        (count (get-chapters @*book-data*))
        ex        (inc (count (get-exs @*book-data* ch)))
        this-data {:type "exercise" :link (str "#!/sicp/ch/1/ex/" ex)}] 
    (swap! *book-data* #(assoc-in % [:ch ch :ex ex] this-data))
    (div :type "exercise" :class "exercise" (h3 (str "Exercise " ch "." ex)) kids)))

(defelem q-a [_ children]
  (let [open        (cell false)
        button-text (cell= (str (if open "Hide" "Show") " solution"))]
    (div
      (button :click #(swap! open not) button-text)
      (div{:class "solution" :toggle open}
                  children))))
(defelem fig [{:keys [footer]} _]
  (let [ch  (count (get-chapters @*book-data*))
        figr (inc (count (get-figs @*book-data* ch)))
        link (str "#!/" 
                  (string/lower-case (:short-title @*book-data*)) "/ch/" ch "/fig/" figr "/")
        src  (str "/img/" (string/lower-case (:short-title @*book-data*)) "/figure" ch "_" figr ".gif")
        this-data {:footer footer :src src :link link}]
    (swap! *book-data* #(assoc-in % [:ch ch :fig figr] this-data))
    (div (img :src src :class "img-responsive" :alt "Figure 1.3")
         (p (b (str "Figure " ch "." figr ": ")) footer))))
(defelem image [attr kids]
  (apply (img :class "img-responsive"
              :src (str "/" (:src attr))) kids))

(defelem footnote [attr kids]
  (let [hidden    (cell true)
        ch        (count (get-chapters @*book-data*))
        ftn       (inc (count (:footnote @*book-data*)))
        this-data kids]
    (swap! *book-data* #(assoc-in % [:footnote ftn] this-data))
    (div :style "display:inline;" 
         (span :click #(swap! hidden not)
               :style "color:#0000ff"
               (sup (str ftn)))
         (div :class (cell= {:hidden hidden
                             :popover true
                             :bottom  true}) 
              (apply (div :class "popover-content"
                          :click #(reset! hidden true)) attr kids)))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; For the French quotes thing...
;
(defmethod md/quoted-node :double-angle [_ kids] (footnote kids))

