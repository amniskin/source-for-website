(ns ui.book-toc
  (:require [ui.book  :as book]
            [ui.style :as style]
            [ui.info  :as info]))


(defc hover-cell nil)

(defelem toc-link [{:keys [link title]} _]
  (let [scroll-link? (cell= (= book/scroll-location link))
        hover?       (cell= (= hover-cell link))
        active?      (cell= (or scroll-link? hover?))]
    (a :class (cell= {:active active?})
       :click #(do (reset! book/scroll-location nil)
                   (reset! book/scroll-location link))
       :hover #(reset! hover-cell link)
       :href link title)))

(defelem li-ch [{:keys [link title]} _]
  (li (toc-link :link link :title title)))


(defelem li-sect [{:keys [link title]} _]
  (li :style "margin-left:0px; font-size:13px;" 
      (toc-link :link link :title title)))

(defelem li-sub [{:keys [link title]} _]
  (li :style "font-size:12px;"
      (toc-link :link link :title title)))

(defelem ul-ch [_ kids]
  (apply
    (ul :class "list-unstyled")
    kids))

(defelem ul-sect [{:keys [ch]} kids]
  (apply 
    (ul :style "padding-left:10px; padding-top:0px;"
        :class (cell= {:list-unstyled true
                       :hidden        (not (= ch (:ch book/scroll-map)))})) 
    kids))

(defelem ul-sub [{:keys [ch sect]} kids]
  (apply 
    (ul :style "padding-left:10px; padding-top:0px;"
        :class (cell= {:list-unstyled true
                       :hidden        (not (and (= (:ch   book/scroll-map) ch)
                                                (= (:sect book/scroll-map) sect)))})) 
    kids))

(defelem ul-ssub [{:keys [ch sect sub]} kids]
  (apply
    (ul :style "padding-left: 10px;"
        :class (cell= {:list-unstyled true
                       :hidden        (not (and (= (:ch   book/scroll-map) ch)
                                                (= (:sect book/scroll-map) sect)
                                                (= (:sub  book/scroll-map) sub)))}))
    kids))





(defelem toc [_ _]
  (style/row
    (div :class "col-md-3 col-sm-3 toc"
      (h3 "Table of Contents")
      (let [all-chapters (cell= (get book/*book-data* :ch))
            num-chapters (cell= (range 1 (inc (count all-chapters))))]
        (ul-ch
          (loop-tpl :bindings [ch num-chapters]
            (let [title     (cell= (get-in all-chapters [ch :title]))
                  link      (cell= (get-in all-chapters [ch :link]))
                  all-sects (cell= (get-in all-chapters [ch :sect]))
                  num-sects (cell= (range 1 (inc (count all-sects))))]
              (div
                (li-ch :link link :title title)
                (ul-sect :ch ch
                  (loop-tpl :bindings [sect num-sects]
                    (let [title    (cell= (get-in all-sects [sect :title]))
                          link     (cell= (get-in all-sects [sect :link]))
                          all-subs (cell= (get-in all-sects [sect :sub]))
                          num-subs (cell= (range 1 (inc (count all-subs))))]
                      (div
                        (li-sect :link link :title title)
                        (ul-sub :ch ch :sect sect
                          (loop-tpl :bindings [sub num-subs]
                            (let [title    (cell= (get-in all-subs [sub :title]))
                                  link     (cell= (get-in all-subs [sub :link]))
                                  all-ssub (cell= (get-in all-subs [sub :ssub]))
                                  num-ssub (cell= (range 1 (inc (count all-subs))))]
                              (div
                                (li-sub :link link :title title)
                                (ul-ssub :ch ch :sect sect :sub sub
                                  (loop-tpl :bindings [ssub num-ssub]
                                    (let [title (cell= (get-in all-ssub [ssub :title]))
                                          link  (cell= (get-in all-ssub [ssub :link]))]
                                      (li-sub :link link :title title)
                                      )))))))))))))))))))
